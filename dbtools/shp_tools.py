# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Prisma
                                 A QGIS plugin
 Plugin para fazer caracterização de imóveis
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-09-29
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Zago
        email                : guilherme.nascimento@economia.gov.br
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import geopandas as gpd

from qgis.core import QgsProject, QgsVectorLayer

from .pgtools import PgTools
import json
import numpy as np

class ShpTools():

    def __init__(self):
        pass

    def OverlayAnalisys(self, operation_data):
        self.operation_data = operation_data
        areas_shp = []

        # Leitura dos dados que serão utilizados para sobreposição de áreas
        input = gpd.read_file(self.operation_data['input'])
        input.to_crs(31982)

        # Leitura de shapefiles com GeoPandas
        for shp in range(len(self.operation_data['shp'])):
            areas_shp.append(gpd.read_file(self.operation_data['shp'][shp]['diretorioLocal']))
            areas_shp[shp].to_crs(31982)

        # Comparação de sobreposição entre input e Shapefiles
        index = -1
        for area in areas_shp:
            index += 1
            for indexArea, rowArea in area.iterrows():
                for indexInput, rowInput in input.iterrows():
                    if(rowArea['geometry'].intersection(rowInput['geometry'])):
                        input.loc[indexInput, self.operation_data['shp'][index]['nome']] = (rowArea['geometry'].intersection(rowInput['geometry'])).area
                        input.loc[indexInput, 'sobreposicao'] = True
                        input.loc[indexInput, 'areaLote'] = rowInput['geometry'].area
                        input.loc[indexInput, 'ctr_lat'] = rowInput['geometry'].centroid.y
                        input.loc[indexInput, 'ctr_long'] = rowInput['geometry'].centroid.x
                    else:
                        input.loc[indexInput, self.operation_data['shp'][index]['nome']] = None
                        input.loc[indexInput, 'sobreposicao'] = False
                        input.loc[indexInput, 'areaLote'] = rowInput['geometry'].area
                        input.loc[indexInput, 'ctr_lat'] = rowInput['geometry'].centroid.y
                        input.loc[indexInput, 'ctr_long'] = rowInput['geometry'].centroid.x

        # Configuração acesso banco de dados Postgis junto das camadas que serão utilizadas
        databases = []
        for db in self.operation_data['pg']:
            databases.append({'connection': PgTools(db['host'], db['porta'], db['db'], db['usuario'], db['senha']),
                              'layers': db['tabelasCamadas']})



        # Comparação de sobreposição entre input e Postgis

        # for db in databases:
        #     db['connection'].
        #     for index, row in input.iterrows():
        #         print(row['geometry'])

        g = json.loads(input.to_json())

        coords = np.array(g['features'][10]['geometry']['coordinates'])
        coords = unzip(coords)
        print(coords)

        # print(str(input.iloc[10]['geometry'].exterior))

        # print(databases[0]['connection'].CAlculateIntersect(str(input.iloc[10]['geometry'].to_wkt()),
        #                                                     databases[0]['layers'][0], 31982))

        # show_overlay = gpd.overlay(input, areas[0], how='intersection')
        #
        # show_qgis_input = QgsVectorLayer(show_overlay.to_json(), "input")
        # QgsProject.instance().addMapLayer(show_qgis_input)
        #
        # show_qgis_area = QgsVectorLayer(show_overlay.to_json(), "militar")
        # QgsProject.instance().addMapLayer(show_qgis_area)

        return input








