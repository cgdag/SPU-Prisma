# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Prisma
                                 A QGIS plugin
 Plugin para fazer caracterização de imóveis
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-09-29
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Zago
        email                : guilherme.nascimento@economia.gov.br
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import geopandas as gpd

from ..databases.db_connection import DbConnection
from ..databases.shp_handle import ShpHandle

class OverlayAnalisys():

    def __init__(self):
        pass

    def OverlayAnalisys(self, operation_config):
        self.operation_config = operation_config
        shp_handle = ShpHandle()

        # Leitura do shapefile de input
        input = self.operation_config['input']
        input = input.to_crs(4326)
        input_standard = input.copy()

        # Cálculo do buffer de proximidade
        if 'aproximacao' in self.operation_config:
            input = shp_handle.add_input_approximation(input, self.operation_config['aproximacao'])

        # Leitura de shapefiles de comparação
        gdf_selected_shp = shp_handle.read_selected_shp(self.operation_config['shp'])

        # Comparação de sobreposição entre input e Shapefiles
        overlay_shp = self.analisys_shapefiles(input, gdf_selected_shp)

        # Configuração acesso banco de dados Postgis junto das camadas que serão utilizadas
        databases = []
        for db in self.operation_config['pg']:
            databases.append({'connection': DbConnection(db['host'], db['porta'], db['baseDeDados'], db['usuario'], db['senha']),
                              'layers': db['tabelasCamadas']})

        # Comparação de sobreposição entre input e Postgis
        gdf_selected_db = []
        for database in databases:
            layers_db = []
            for layer in database['layers']:

                gdf, crs = database['connection'].CalculateIntersectGPD(input, layer,
                                                                         (str(input.crs)).replace('epsg:', ''))
                gdf.crs = {'init': 'epsg:' + str(crs)}
                layers_db.append(gpd.GeoDataFrame(gdf, crs=crs))

            print(layers_db[0].crs)
            gdf_selected_db.append(layers_db)

        # Comparação de sobreposição entre input e bases de dados de banco de dados
        overlay_db = self.analysis_databases(input, gdf_selected_db)

        result = {'overlay_shp': overlay_shp, 'overlay_db': overlay_db, 'input': input,
                  'input_standard': input_standard, 'gdf_selected_shp': gdf_selected_shp, 'gdf_selected_db': gdf_selected_db}

        return result

    def analisys_shapefiles(self, input, gdf_selected_shp):
        index = 0
        overlay_shp = input.copy()
        
        for area in gdf_selected_shp:
            overlay_shp[self.operation_config['shp'][index]['nome']] = False
            area = area.to_crs(4326)
            for indexArea, rowArea in area.iterrows():
                for indexInput, rowInput in input.iterrows():
                    if (rowArea['geometry'].intersection(rowInput['geometry'])):
                        overlay_shp.loc[indexInput, self.operation_config['shp'][index]['nome']] = True
            index += 1
        return overlay_shp

    def analysis_databases(self, input, gdf_selected_db):
        index_db = 0
        overlay_db = input.copy()
        overlay_db['sobreposicao'] = False
        for db in gdf_selected_db:
            index_layer = 0
            for layer_db in db:
                layer_db.geometry = gpd.GeoSeries.from_wkt(layer_db['geometry'])
                layer_db = layer_db.to_crs(4326)
                for indexArea, rowArea in layer_db.iterrows():
                    for indexInput, rowInput in input.iterrows():
                        if (rowArea['geometry'].intersection(rowInput['geometry'])):
                            overlay_db.loc[indexInput, self.operation_config['pg'][index_db]['nomeFantasiaTabelasCamadas'][
                                    index_layer]] = True

                index_layer += 1

            index_db += 1
        return overlay_db