# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Prisma
                                 A QGIS plugin
 Plugin para fazer caracterização de imóveis
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-09-29
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Zago
        email                : guilherme.nascimento@economia.gov.br
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from ..utils.utils import Utils

import geopandas as gpd

class OverlayAnalisys():
    """
    Classe utilizada para verificar quais áreas possuem sobreposição entre input de entrada e camadas de comparação.

    @ivar operation_config: Dicionário que armazena configurações de operação, como por exemplo: dado de input, bases de dados selecionadas para comparação, busca por ponto, shapefile, etc...
    @ivar shp_handle: Armazena classe para leitura de arquivos shapefile.
    @ivar utils: Armazena classe contendo algumas funções úteis para o código.
    """
    def __init__(self):
        """Método construtor da classe."""
        self.utils = Utils()

    def overlay_analysis(self, dic_layers, operation_config):
        """
        Função que conta quantas sobreposições aconteceram entre a camada de input e as todas as camadas de comparação selecionadas.
        Esta função é feita através da projeção geográfica.

        @keyword operation_config: Dicionário que armazena configurações de operação, como por exemplo: dado de input, bases de dados selecionadas para comparação, busca por ponto, shapefile, etc...
        @return result: Dicionário que retorna, no formato de geodataframe, todas camadas passadas para comparação e também as camadas que tiveram sobreposição.
        """
        self.operation_config = operation_config

        lyr_input = dic_layers['input']
        list_required = dic_layers['required']
        list_selected_shp = dic_layers['shp']
        list_selected_wfs = dic_layers['wfs']
        list_selected_db = dic_layers['db']

        feats_input = lyr_input.getFeatures()
        lyr_input.selectAll()
        bbox_lyr_input = lyr_input.boundingBoxOfSelected()
                
        dic_overlaps = {}
        for feat in feats_input:
            feat_geom = feat.geometry()

            for lyr_shp in list_selected_shp:
                feats_shp = lyr_shp.getFeatures(bbox_lyr_input)

                for feat_shp in feats_shp:
                    feat_shp_geom = feat_shp.geometry()

                    if feat_geom.intersects(feat_shp_geom):
                        if lyr_shp.name() not in dic_overlaps:
                            dic_overlaps[lyr_shp.name()] = [lyr_shp, 1]
                        else:
                            dic_overlaps[lyr_shp.name()][1] += 1
            
            for lyr_db in list_selected_db:
                feats_db = lyr_db.getFeatures(bbox_lyr_input)

                for feat_db in feats_db:
                    feat_db_geom = feat_db.geometry()

                    if feat_geom.intersects(feat_db_geom):
                        if lyr_db.name() not in dic_overlaps:
                            dic_overlaps[lyr_db.name()] = [lyr_db, 1]
                        else:
                            dic_overlaps[lyr_db.name()][1] += 1
            
            for lyr_wfs in list_selected_wfs:
                feats_wfs = lyr_wfs.getFeatures(bbox_lyr_input)

                for feat_wfs in feats_wfs:
                    feat_wfs_geom = feat_wfs.geometry()

                    if feat_geom.intersects(feat_wfs_geom):
                        if lyr_wfs.name() not in dic_overlaps:
                            dic_overlaps[lyr_wfs.name()] = [lyr_wfs, 1]
                        else:
                            dic_overlaps[lyr_wfs.name()][1] += 1

            for lyr_req in list_required:
                feats_req = lyr_req.getFeatures(bbox_lyr_input)

                for feat_req in feats_req:
                    feat_req_geom = feat_req.geometry()

                    if feat_geom.intersects(feat_req_geom):
                        if lyr_req.name() not in dic_overlaps:
                            dic_overlaps[lyr_req.name()] = [lyr_req, 1]
                        else:
                            dic_overlaps[lyr_req.name()][1] += 1

        

        return dic_overlaps

    def analisys_shp(self, input, gdf_selected_shp):
        """Verifica sobreposição entre camada de input e camadas shapefiles selecionadas.

        @keyword input: Camada de input.
        @keyword gdf_selected_shp: Camadas shapefiles selecionadas para comparação.
        @return overlay_shp: Retorna camada contendo um campo True para feições de comparação que se sobrepuseram a camada de input.
        """
        index = 0
        overlay_shp = input.copy()
        for area in gdf_selected_shp:
            overlay_shp[self.operation_config['shp'][index]['nomeFantasiaCamada']] = False
            area = area.to_crs(4326)
            for indexArea, rowArea in area.iterrows():
                for indexInput, rowInput in input.iterrows():
                    if (rowArea['geometry'].intersection(rowInput['geometry'])):
                        overlay_shp.loc[indexInput, self.operation_config['shp'][index]['nomeFantasiaCamada']] = True
                        # if str(input.geom_type) == str(area.geom_type):
                        #     overlay_shp.loc[indexInput, str(self.operation_config['shp'][index]['nomeFantasiaCamada'] + "_area")] += (rowArea['geometry'].intersection(rowInput['geometry'])).area

            index += 1
        return overlay_shp

    def analisys_wfs(self, input, gdf_selected_wfs):
        """Verifica sobreposição entre camada de input e camadas shapefiles selecionadas.

        @keyword input: Camada de input.
        @keyword gdf_selected_shp: Camadas shapefiles selecionadas para comparação.
        @return overlay_shp: Retorna camada contendo um campo True para feições de comparação que se sobrepuseram a camada de input.
        """
        index = 0
        overlay_wfs = input.copy()
        for area in gdf_selected_wfs:
            overlay_wfs[self.operation_config['wfs'][index]['nomeFantasiaTabelasCamadas']] = False
            area = area.to_crs(4326)
            for indexArea, rowArea in area.iterrows():
                for indexInput, rowInput in input.iterrows():
                    if (rowArea['geometry'].intersection(rowInput['geometry'])):
                        overlay_wfs.loc[indexInput, self.operation_config['wfs'][index]['nomeFantasiaTabelasCamadas']] = True
                        # if str(input.geom_type) == str(area.geom_type):
                        #     overlay_shp.loc[indexInput, str(self.operation_config['shp'][index]['nomeFantasiaCamada'] + "_area")] += (rowArea['geometry'].intersection(rowInput['geometry'])).area

            index += 1
        return overlay_wfs

    def analysis_db(self, input, gdf_selected_db):
        """Verifica sobreposição entre camada de input e camadas de banco de dados selecionadas.

        @keyword input: Camada de input.
        @keyword gdf_selected_shp: Camadas de banco de dados selecionadas para comparação.
        @return overlay_db: Retorna camada contendo um campo True para feições de comparação que se sobrepuseram a camada de input.
        """
        index_db = 0
        overlay_db = input.copy()
        # overlay_db['sobreposicao'] = False
        for db in gdf_selected_db:
            index_layer = 0
            for layer_db in db:
                overlay_db[self.operation_config['pg'][index_db]['nomeFantasiaTabelasCamadas'][index_layer]] = False
                # layer_db.geometry = gpd.GeoSeries.from_wkt(layer_db['geometry'])
                layer_db = layer_db.to_crs(4326)
                for indexArea, rowArea in layer_db.iterrows():
                    for indexInput, rowInput in input.iterrows():
                        if (rowArea['geometry'].intersection(rowInput['geometry'])):
                            overlay_db.loc[indexInput, self.operation_config['pg'][index_db]['nomeFantasiaTabelasCamadas'][
                                    index_layer]] = True
                            # if str(input.geom_type) == str(layer_db.geom_type):
                            #     overlay_db.loc[
                            #         indexInput, str(self.operation_config['pg'][index_db]['nomeFantasiaTabelasCamadas'][
                            #             index_layer] + "_area")] += (rowArea['geometry'].intersection(rowInput['geometry'])).area

                index_layer += 1

            index_db += 1
        return overlay_db

    def get_utm_crs(self, input, epsg_shp_dir):
        """Para cada feição da camada de input, através da análise de sobreposição, verifica em qual zona UTM a mesma se encontra.

        @keyword input: Camada de input.
        @keyword epsg_shp_dir: Armazena o caminho do diretório, dentro do Prisma, em que se encontra o shapefile contendo a camada de Zonas UTM.
        @return input: Retorna coluna contendo a zona UTM em que se encontra cada feiçõa de input.
        """
        input['crs_feature'] = None
        epsg_shp = gpd.read_file(epsg_shp_dir)

        # Caso input seja polígonos
        if input.iloc[0]['geometry'].type in ['Polygon', 'MultiPolygon']:
            for indexInput, rowInput in input.iterrows():
                areamaior = 0
                for indexEpsg, rowEpsg in epsg_shp.iterrows():
                    area = rowInput['geometry'].intersection(rowEpsg['geometry']).area
                    if area > 0:
                        if area > areamaior:
                            input.loc[indexInput, 'crs_feature'] = rowEpsg['EPSG_S2000']
                            areamaior = area

        # Caso input seja linhas
        elif input.iloc[0]['geometry'].type in ['LineString', 'MultiLineString']:
            for indexInput, rowInput in input.iterrows():
                areamaior = 0
                for indexEpsg, rowEpsg in epsg_shp.iterrows():
                    area = rowInput['geometry'].intersection(rowEpsg['geometry']).length
                    if area > 0:
                        if area > areamaior:
                            input.loc[indexInput, 'crs_feature'] = rowEpsg['EPSG_S2000']
                            areamaior = area

        return input['crs_feature']